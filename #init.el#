
(defun backward-kill-line (arg)
    "Kill ARG lines backward."
      (interactive "p")
        (kill-line (- 1 arg)))

(require 'package)

(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))

(defvar my-packages
  '(
      better-defaults
      markdown-mode
      paredit
      coffee-mode
      idle-highlight-mode
      ido-ubiquitous
      find-file-in-project
      magit
      smex
      evil
      scpaste
   )
)

 (package-initialize)
 (dolist (p my-packages)
   (when (not (package-installed-p p))
     (package-install p)))

(load (expand-file-name "~/quicklisp/slime-helper.el"))
(setq inferior-lisp-program "clisp")
(custom-set-variables '(coffee-tab-width 2))
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

(global-set-key (kbd "C-?") 'help-command)
(global-set-key (kbd "M-?") 'mark-paragraph)
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "M-h") 'backward-kill-word)
(define-key global-map (kbd "RET") 'newline-and-indent)
(setq make-backup-files nil)
(global-set-key "\C-u" 'backward-kill-line)

(evil-mode 1)
(define-key evil-normal-state-map (kbd ",f") 'projectile-find-file)
(define-key evil-normal-state-map (kbd ",,") 'evil-buffer)
(define-key evil-normal-state-map (kbd "q") nil)
(define-key evil-normal-state-map (kbd "c") nil)

(define-key evil-insert-state-map (kbd "C-e") nil)
(define-key evil-insert-state-map (kbd "C-d") nil)
(define-key evil-insert-state-map (kbd "C-k") nil)
(define-key evil-insert-state-map (kbd "C-c") 'evil-normal-state)
(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
(define-key evil-visual-state-map (kbd "C-c") 'evil-normal-state)

(define-key evil-motion-state-map (kbd "C-e") nil)
(define-key evil-visual-state-map (kbd "C-c") 'evil-exit-visual-state)
(defun linum-relative-right-set-margin ()
    "Make width of right margin the same as left margin"
      (let* ((win (get-buffer-window))
                  (width (car (window-margins win))))
            (set-window-margins win width width)))

(defadvice linum-update-current (after linum-left-right-update activate)
    "Advice to run right margin update"
      (linum-relative-right-set-margin)
        (linum-relative-right-update (line-number-at-pos)))

(defadvice linum-delete-overlays (after linum-relative-right-delete activate)
    "Set margins width to 0"
      (set-window-margins (get-buffer-window) 0 0))

(defun linum-relative-right-update (line)
    "Put relative numbers to the right margin"
      (dolist (ov (overlays-in (window-start) (window-end)))
            (let ((str (overlay-get ov 'linum-str)))
                    (if str
                              (let ((nstr (number-to-string
                                                          (abs (- (string-to-number str) line)))))
                                        ;; copy string properties
                                        (set-text-properties 0 (length nstr) (text-properties-at 0 str) nstr)
                                                (overlay-put ov 'after-string
                                                                          (propertize " " 'display `((margin right-margin) ,nstr))))))))